# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# access data
type Access {
  _id: ObjectId!

  # access level
  level: String!

  # access type
  type: String!
}

# access level
enum AccessLevel {
  owner
  admin
  edit
  view
  none
}

# base file
type AntlrFile {
  _id: ObjectId!

  # file name
  name: String!

  # import path
  importPath: String!

  # file path
  path: String!

  # classes
  classes: [Class!]!

  # functions
  functions: [Function!]!

  # variables
  variables: [Variable!]!

  # imports
  imports: [Import!]!

  # comments
  comments: [Comment!]!

  # language type
  language: [Language!]!
}

# auth notification
type AuthNotification {
  id: String!
  token: String!
}

# base project
type BaseProject {
  # name
  name: String!

  # repositories
  repositories: [ObjectId!]!
}

# base repository
type BaseRepository {
  # name
  name: String!

  # branches
  owner: ObjectId!

  # branches
  branches: [String!]!

  # project
  project: ObjectId!

  # public access level
  public: [Access!]!
}

# class
type Class {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!

  # class name
  name: String!
}

# comment
type Comment {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!

  # data
  data: String!

  # type
  type: CommentType!
}

# comment type
enum CommentType {
  multilineComment
  singleLineComment
}

# file
type File {
  _id: ObjectId!

  # file name
  name: String!

  # import path
  importPath: String!

  # path
  path: String!

  # classes
  classes: [Class!]!

  # functions
  functions: [Function!]!

  # variables
  variables: [Variable!]!

  # imports
  imports: [Import!]!

  # comments
  comments: [Comment!]!

  # language type
  language: [Language!]!

  # number of lines in file
  fileLength: Int!

  # project id
  project: String!

  # repository id
  repository: String!

  # branches
  branches: [String!]!

  # number of branches
  numBranches: Int!

  # public access level
  public: AccessLevel!

  # storage location
  location: String!

  # date created
  created: Float!

  # date updated
  updated: Float!
}

# file owner
type FileLocation {
  # repository name
  repository: String!

  # repository owner
  owner: String!

  # repository image
  image: String!
}

# file result
type FileResult {
  # file id
  _id: ObjectId!

  # file name
  name: String!

  # file path
  path: String!

  # search results
  results: [SearchResult!]!

  # file search results
  fileResult: FileSearchResult

  # language data
  language: LanguageData!

  # file location
  location: FileLocation!

  # lines in file
  lines: Location!

  # branches
  branches: [String!]!

  # result score
  score: Float!
}

# file result match
type FileSearchResult {
  # file search results
  results: [SearchResult!]!

  # file preview
  preview: Preview!
}

# baseline function
type Function {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!

  # function name
  name: String!

  # return type
  returnType: String!

  # is a constructor
  isConstructor: Boolean!
}

# import
type Import {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!

  # path
  path: String!

  # selection
  selection: String!
}

# language type
enum Language {
  java
  javascript
}

# language data
type LanguageData {
  # language name
  name: Language!

  # associated color
  color: Int!
}

# location
type Location {
  # start
  start: Float!

  # end
  end: Float!
}

type Mutation {
  deleteAccount(
    # email
    email: String
  ): String!
  login(
    # email
    email: String!

    # password
    password: String!
  ): String!
  loginGuest: String!
  logout: String!
  revokeRefresh(
    # email
    email: String
  ): String!
  register(
    # name
    name: String!

    # email
    email: String!

    # password
    password: String!
  ): String!
  updateAccount(
    # name
    name: String

    # email
    email: String

    # password
    password: String
  ): String!
  addBranch(
    # branch name
    name: String!

    # repository id
    repository: ObjectId!
  ): String!
  deleteFile(
    # file id
    id: ObjectId!

    # branch name
    branch: String!
  ): String!
  deleteBranch(
    # repository id
    repository: ObjectId!

    # branch name
    name: String!
  ): String!
  indexFiles(
    # paths
    paths: [String!]!

    # files
    files: [Upload!]!

    # project id
    project: ObjectId!

    # repo name
    repository: ObjectId!

    # branch
    branch: String!

    # branch
    saveContent: Boolean = false
  ): String!
  indexGithub(
    # github repository id
    githubRepositoryID: Int!

    # added
    added: [String!]!

    # modified
    modified: [String!]!

    # removed
    removed: [String!]!

    # branch
    ref: String!

    # repo name
    repositoryName: String!

    # repo owner
    repositoryOwner: String!

    # github installation id
    installationID: Int!
  ): String!
  addProject(
    # project name
    name: String!
  ): String!
  deleteRepository(
    # repository id
    id: ObjectId!
  ): String!
  deleteProject(
    # project id
    id: ObjectId!
  ): String!
  addRepository(
    # repository name
    name: String!

    # project
    project: ObjectId!

    # public access level
    publicAccess: AccessLevel!
  ): String!
}

# class
type NestedObject {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!
}

# Mongo object id scalar type
scalar ObjectId

# parent
type Parent {
  _id: ObjectId!

  # parent type
  type: ParentType!
}

# parent element object
type ParentElement {
  # parent name
  name: String!

  # parent type
  type: ResultType!
}

# parent type
enum ParentType {
  File
  Class
  Function
  Variable
}

# preview data
type Preview {
  # preview start line number
  startPreviewLineNumber: Int!

  # preview start content
  startPreviewContent: [String!]!

  # preview end line number
  endPreviewLineNumber: Int!

  # preview end content
  endPreviewContent: [String!]!
}

# project
type Project {
  # name
  name: String!

  # repositories
  repositories: [ObjectId!]!
  _id: ObjectId!

  # date created
  created: Float!

  # date updated
  updated: Float!
}

# project database
type ProjectDB {
  # name
  name: String!

  # repositories
  repositories: [ObjectId!]!
  _id: ObjectId!
}

type Query {
  # user data
  user: User!
  branches(
    # repository id
    repository: ObjectId!
  ): [String!]!
  file(
    # file id
    id: ObjectId!
  ): File!
  files(
    # query
    query: String

    # only user files
    onlyUser: Boolean

    # projects
    projects: [ObjectId!]

    # repositories
    repositories: [ObjectId!]

    # file id
    file: ObjectId

    # branches
    branches: [String!]

    # page number
    page: Int

    # number per page
    perpage: Int
  ): [File!]!
  fileText(
    # file id
    id: ObjectId!

    # branch name
    branch: String!

    # start line
    start: Int!

    # end line
    end: Int!
  ): [String!]!
  search(
    # query
    query: String

    # only user files
    onlyUser: Boolean

    # projects
    projects: [ObjectId!]

    # repositories
    repositories: [ObjectId!]

    # file id
    file: ObjectId

    # branches
    branches: [String!]

    # page number
    page: Int

    # number per page
    perpage: Int

    # end line
    maxResultsPerFile: Int
  ): [FileResult!]!
  hello: String!
  project(
    # project id
    id: ObjectId

    # project name
    name: String
  ): Project!
  projects(
    # page number
    page: Int

    # number per page
    perpage: Int
  ): [Project!]!
  repositories(
    # project id
    projects: [ObjectId!]

    # page number
    page: Int

    # number per page
    perpage: Int
  ): [Repository!]!
  repository(
    # repository id
    id: ObjectId

    # project id
    project: ObjectId

    # repository name
    name: String
  ): Repository!
}

# repository
type Repository {
  # name
  name: String!

  # branches
  owner: ObjectId!

  # branches
  branches: [String!]!

  # project
  project: ObjectId!

  # public access level
  public: [Access!]!
  _id: ObjectId!

  # date created
  created: Float!

  # date updated
  updated: Float!

  # number of branches
  numBranches: Int!
}

# repository db
type RepositoryDB {
  # name
  name: String!

  # branches
  owner: ObjectId!

  # branches
  branches: [String!]!

  # project
  project: ObjectId!

  # public access level
  public: [Access!]!
  _id: ObjectId!

  # repository image
  image: String!
}

# result type
enum ResultType {
  import
  class
  function
  variable
  comment
  name
  path
  importPath
}

# search result
type SearchResult {
  # item name
  name: String!

  # item type
  type: ResultType!

  # parents to current result
  parents: [ParentElement!]!

  # result score
  score: Float

  # result preview
  preview: Preview
}

type Subscription {
  authNotifications: AuthNotification!
}

# The `Upload` scalar type represents a file upload.
scalar Upload

# user account
type User {
  _id: ObjectId!

  # user name
  name: String!

  # user email
  email: String!

  # user plan
  plan: String!

  # user type
  type: String!

  # github installation id
  githubInstallationID: Float!

  # github username
  githubUsername: String!

  # email verified
  emailVerified: Boolean!

  # current token version
  tokenVersion: Float!

  # repository access
  repositories: [Access!]!

  # project access
  projects: [Access!]!
}

# variable
type Variable {
  _id: ObjectId!

  # parent
  parent: Parent!

  # location
  location: Location!

  # name
  name: String!

  # type
  type: String!

  # is function argument
  isArgument: Boolean!
}
