# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""access data"""
type Access {
  _id: ObjectId!

  """access level"""
  level: String!

  """access type"""
  type: String!
}

"""access level"""
enum AccessLevel {
  admin
  edit
  none
  owner
  view
}

"""address object"""
type Address {
  _id: ObjectId!

  """city"""
  city: String!

  """country"""
  country: String!

  """line 1"""
  line1: String!

  """line 2"""
  line2: String

  """name"""
  name: String!

  """postal code"""
  postal_code: String!

  """state"""
  state: String!

  """user"""
  user: ObjectId!
}

"""auth notification"""
type AuthNotification {
  id: String!
  token: String!
}

"""class"""
type Class {
  _id: ObjectId!

  """location"""
  location: Location!

  """class name"""
  name: String!

  """parent"""
  parent: Parent!
}

"""comment"""
type Comment {
  _id: ObjectId!

  """data"""
  data: String!

  """location"""
  location: Location!

  """parent"""
  parent: Parent!

  """type"""
  type: CommentType!
}

"""comment type"""
enum CommentType {
  multilineComment
  singleLineComment
}

"""coupons"""
type Coupon {
  _id: ObjectId!

  """coupon amount"""
  amount: Int!

  """coupon is percent off"""
  isPercent: Boolean!

  """coupon name"""
  name: String!
}

"""credit card brand"""
enum CreditCardBrand {
  amex
  diners
  discover
  jcb
  mastercard
  unionpay
  unknown
  visa
}

"""currency data"""
type Currency {
  _id: ObjectId!

  """accepted as payment"""
  acceptedPayment: Boolean!

  """exchange rate to usd"""
  exchangeRate: Float!

  """currency name"""
  name: String!
}

"""file"""
type File {
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """classes"""
  classes: [Class!]!

  """comments"""
  comments: [Comment!]!

  """date created"""
  created: Float!

  """number of lines in file"""
  fileLength: Int!

  """folder"""
  folder: ObjectId

  """functions"""
  functions: [Function!]!

  """sha-1 hash"""
  hash: String!

  """has antlr data"""
  hasStructure: Boolean!

  """import path"""
  importPath: String!

  """imports"""
  imports: [Import!]!

  """language type"""
  language: Language!

  """file name"""
  name: String!

  """number of branches"""
  numBranches: Int!

  """path"""
  path: String!

  """public access level"""
  public: AccessLevel!

  """repository id"""
  repository: ObjectId!

  """date updated"""
  updated: Float!

  """variables"""
  variables: [Variable!]!
}

"""file owner"""
type FileLocation {
  """repository image"""
  image: String!

  """repository owner"""
  owner: String!

  """repository name"""
  repository: String!
}

"""file result"""
type FileResult {
  """file id"""
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """file search results"""
  fileResult: FileSearchResult

  """language data"""
  language: LanguageData!

  """lines in file"""
  lines: Location!

  """file location"""
  location: FileLocation!

  """file name"""
  name: String!

  """file path"""
  path: String!

  """search results"""
  results: [SearchResult!]!

  """result score"""
  score: Float!
}

"""file result match"""
type FileSearchResult {
  """file preview"""
  preview: Preview!

  """file search results"""
  results: [SearchResult!]!
}

"""folder"""
type Folder {
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """date created"""
  created: Float!

  """name"""
  name: String!

  """number of branches"""
  numBranches: Int!

  """parent folder or repository"""
  parent: ObjectId!

  """path"""
  path: String!

  """public access level"""
  public: [Access!]!

  """repository"""
  repository: ObjectId!

  """date updated"""
  updated: Float!
}

"""folder db"""
type FolderDB {
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """date created"""
  created: Float!

  """name"""
  name: String!

  """parent folder or repository"""
  parent: ObjectId!

  """path"""
  path: String!

  """public access level"""
  public: [Access!]!

  """repository"""
  repository: ObjectId!

  """date updated"""
  updated: Float!
}

"""baseline function"""
type Function {
  _id: ObjectId!

  """is a constructor"""
  isConstructor: Boolean!

  """location"""
  location: Location!

  """function name"""
  name: String!

  """parent"""
  parent: Parent!

  """return type"""
  returnType: String!
}

"""import"""
type Import {
  _id: ObjectId!

  """location"""
  location: Location!

  """parent"""
  parent: Parent!

  """path"""
  path: String!

  """selection"""
  selection: String!
}

"""interval type"""
enum IntervalType {
  month
  once
  year
}

"""language type"""
enum Language {
  java
  javascript
  none
}

"""language data"""
type LanguageData {
  """associated color"""
  color: Int!

  """language name"""
  name: Language!
}

"""location"""
type Location {
  """end"""
  end: Float!

  """start"""
  start: Float!
}

type Mutation {
  addAddress(
    """city"""
    city: String

    """country"""
    country: String

    """line 1"""
    line1: String

    """line 2"""
    line2: String

    """name"""
    name: String!

    """google places place id"""
    place_id: String

    """postal code"""
    postal_code: String

    """set to default"""
    setDefault: Boolean = true

    """state"""
    state: String
  ): ReturnObj!
  addBranch(
    """branch name"""
    name: String!

    """repository id"""
    repository: ObjectId!
  ): String!
  addCoupon(
    """amount off for coupon"""
    amount: Float!

    """if percent off or not"""
    isPercent: Boolean!

    """coupon name"""
    name: String!
  ): String!
  addCurrency(
    """add currency to accepted for payments"""
    name: String!
  ): String!
  addFolder(
    """branch name"""
    branch: String!

    """folder name"""
    name: String!

    """owner name"""
    owner: String

    """folder path"""
    path: String!

    """repository name"""
    repository: String

    """repository id"""
    repositoryID: ObjectId
  ): String!
  addPaymentMethod(
    """stripe card token"""
    cardToken: String!

    """name"""
    currency: String!

    """set to default"""
    setDefault: Boolean = true
  ): ReturnObj!
  addProduct(
    """product name"""
    name: String!

    """plans for product"""
    plans: PlanInput!

    """number of private repositories allowed"""
    privateRepositories: Float!

    """number of public repositories allowed"""
    publicRepositories: Float!

    """storage allowed (in bytes)"""
    storage: Float!
  ): String!
  addProject(
    """project name"""
    name: String!
  ): String!
  addRepository(
    """repository name"""
    name: String!

    """project"""
    project: ObjectId

    """public access level"""
    publicAccess: AccessLevel!
  ): String!
  addToken(
    """how long the token is valid for (in seconds)"""
    expires: Int

    """token name"""
    notes: String!

    """access scopes"""
    scopes: [ScopeInput!]
  ): ReturnObj!
  addToMailingList(
    """email"""
    email: String!

    """name"""
    name: String!

    """recaptcha token"""
    recaptchaToken: String!
  ): String!
  deleteAccount(
    """email"""
    email: String
  ): String!
  deleteAddress(
    """address id"""
    id: ObjectId!
  ): String!
  deleteBranch(
    """branch name"""
    name: String!

    """repository id"""
    repository: ObjectId!
  ): String!
  deleteCoupon(
    """coupon name"""
    name: String!
  ): String!
  deleteCurrency(
    """remove currency from accepted for payments"""
    name: String!
  ): String!
  deleteFile(
    """branch name"""
    branch: String!

    """file id"""
    id: ObjectId!
  ): String!
  deleteFolder(
    """branch name"""
    branch: String!

    """folder id"""
    id: ObjectId

    """folder name"""
    name: String

    """owner name"""
    owner: String

    """folder path"""
    path: String

    """repository name"""
    repository: String

    """repository id"""
    repositoryID: ObjectId
  ): String!
  deletePaymentMethod(
    """payment method id"""
    id: ObjectId!
  ): String!
  deleteProduct(
    """product name"""
    name: String!
  ): String!
  deleteProject(
    """project id"""
    id: ObjectId!
  ): String!
  deleteRepository(
    """repository id"""
    id: ObjectId!
  ): String!
  deleteToken(
    """token id"""
    id: ObjectId!
  ): String!
  indexFiles(
    """create branch automatically"""
    autoCreateBranch: Boolean = false

    """branch"""
    branch: String!

    """files"""
    files: [Upload!]!

    """repository owner"""
    owner: String!

    """paths"""
    paths: [String!]!

    """repository name"""
    repository: String!
  ): String!
  indexGithub(
    """added"""
    added: [String!]!

    """github repository id"""
    githubRepositoryID: Int!

    """github installation id"""
    installationID: Int!

    """modified"""
    modified: [String!]!

    """branch"""
    ref: String!

    """removed"""
    removed: [String!]!

    """repo name"""
    repositoryName: String!

    """repo owner"""
    repositoryOwner: String!
  ): String!
  login(
    """password"""
    password: String!

    """recaptcha token"""
    recaptchaToken: String!

    """username or email"""
    usernameEmail: String!
  ): String!
  loginGithub(
    """github code"""
    code: String!

    """gitub state"""
    state: String!
  ): String!
  loginGuest: String!
  logout: String!
  purchase(
    """address id"""
    address: ObjectId

    """coupon - only allow one at a time for now"""
    coupon: String

    """plan interval for product"""
    interval: IntervalType!

    """payment method id"""
    paymentMethod: ObjectId

    """product id"""
    product: String!
  ): ReturnObj!
  register(
    """email"""
    email: String!

    """name"""
    name: String!

    """password"""
    password: String!

    """recaptcha token"""
    recaptchaToken: String!

    """username"""
    username: String!
  ): String!
  registerGithub(
    """github code"""
    code: String!

    """name"""
    name: String

    """gitub state"""
    state: String!

    """username"""
    username: String
  ): String!
  revokeRefresh(
    """email"""
    email: String
  ): String!
  sendTestEmail(
    """content"""
    content: String

    """email"""
    email: String!

    """name"""
    name: String!

    """subject"""
    subject: String
  ): String!
  setDefaultPaymentMethod(
    """payment method object id"""
    id: ObjectId!
  ): String!
  updateAccount(
    """email"""
    email: String

    """name"""
    name: String

    """password"""
    password: String
  ): String!
  usernameExists(
    """recaptcha token"""
    recaptchaToken: String!

    """username"""
    username: String!
  ): Boolean!
  verifyEmail(
    """name"""
    token: String!
  ): String!
}

"""class"""
type NestedObject {
  _id: ObjectId!

  """location"""
  location: Location!

  """parent"""
  parent: Parent!
}

"""Mongo object id scalar type"""
scalar ObjectId

"""parent"""
type Parent {
  _id: ObjectId!

  """parent type"""
  type: ParentType!
}

"""parent element object"""
type ParentElement {
  """parent name"""
  name: String!

  """parent type"""
  type: ResultType!
}

"""parent type"""
enum ParentType {
  Class
  File
  Function
  Variable
}

"""payment method object"""
type PaymentMethod {
  _id: ObjectId!

  """billing address"""
  address: ObjectId

  """credit card type"""
  brand: CreditCardBrand!

  """currency"""
  currency: String!

  """credit card last four digits"""
  lastFourDigits: Int!

  """payment method stripe id"""
  method: String!

  """user"""
  user: ObjectId!
}

type Plan {
  """amount"""
  amount: Float!

  """interval"""
  interval: IntervalType!
}

input PlanInput {
  """plan cost"""
  amount: Float!

  """plan interval"""
  interval: String!
}

"""preview data"""
type Preview {
  """preview end content"""
  endPreviewContent: [String!]!

  """preview end line number"""
  endPreviewLineNumber: Int!

  """preview start content"""
  startPreviewContent: [String!]!

  """preview start line number"""
  startPreviewLineNumber: Int!
}

"""products"""
type Product {
  _id: ObjectId!

  """if product is free"""
  isFree: Boolean!

  """product name"""
  name: String!

  """plans"""
  plans: [Plan!]!

  """number of private repositories allowed"""
  privateRepositories: Float!

  """number of public repositories allowed"""
  publicRepositories: Float!

  """storage restrictions"""
  storage: Float!

  """stripe id"""
  stripeID: String!
}

"""project"""
type Project {
  _id: ObjectId!

  """date created"""
  created: Float!

  """name"""
  name: String!

  """owner"""
  owner: ObjectId!

  """repositories"""
  repositories: [ObjectId!]!

  """date updated"""
  updated: Float!
}

"""project database"""
type ProjectDB {
  _id: ObjectId!

  """date created"""
  created: Float!

  """name"""
  name: String!

  """owner"""
  owner: ObjectId!

  """repositories"""
  repositories: [ObjectId!]!

  """date updated"""
  updated: Float!
}

"""public user data"""
type PublicUser {
  """email"""
  email: String!

  """name"""
  name: String!

  """username"""
  username: String!
}

type Query {
  address(
    """address id"""
    id: ObjectId!
  ): Address!
  addresses(
    """address user"""
    user: ObjectId
  ): [Address!]!
  branches(
    """repository id"""
    repository: ObjectId!
  ): [String!]!
  countries: [String!]!
  coupon(
    """coupon name"""
    name: String!

    """recaptcha token"""
    recaptchaToken: String
  ): Coupon!
  coupons: [Coupon!]!
  currencies(
    """currency is accepted as payment method"""
    acceptedPayment: Boolean

    """currency names"""
    names: [String!]
  ): [Currency!]!
  file(
    """file branch"""
    branch: String

    """file id"""
    id: ObjectId

    """file name"""
    name: String

    """owner name"""
    owner: String

    """file path"""
    path: String

    """repository name"""
    repository: String

    """repository id"""
    repositoryID: ObjectId
  ): File!
  fileNameExists(
    """file branch"""
    branch: String!

    """file name"""
    name: String!

    """file path"""
    path: String

    """repository id"""
    repository: ObjectId!
  ): Boolean!
  files(
    """only get base file data"""
    baseFileOnly: Boolean = true

    """branches"""
    branches: [String!]

    """file id"""
    file: ObjectId

    """programming languages"""
    languages: [Language!]

    """file name"""
    name: String

    """only user files"""
    onlyUser: Boolean

    """page number"""
    page: Int

    """file path"""
    path: String

    """number per page"""
    perpage: Int

    """projects"""
    projects: [ObjectId!]

    """query"""
    query: String

    """repositories"""
    repositories: [ObjectId!]
  ): [File!]!
  filesInFolder(
    """branch"""
    branch: String!

    """folder"""
    folder: ObjectId!

    """repository"""
    repository: ObjectId!
  ): Int!
  fileText(
    """branch name"""
    branch: String!

    """end line"""
    end: Int

    """file id"""
    id: ObjectId!

    """start line"""
    start: Int
  ): [String!]!
  folder(
    """folder branch"""
    branch: String

    """folder id"""
    id: ObjectId

    """folder name"""
    name: String

    """owner name"""
    owner: String

    """folder path"""
    path: String

    """repository name"""
    repository: String

    """repository id"""
    repositoryID: ObjectId
  ): FolderDB!
  folderExists(
    """repository owner"""
    owner: String

    """folder path"""
    path: String!

    """repository name"""
    repositoryName: String!
  ): Boolean!
  folders(
    """branches"""
    branches: [String!]

    """folder name"""
    name: String

    """only user folders"""
    onlyUser: Boolean

    """page number"""
    page: Int

    """folder path"""
    path: String

    """number per page"""
    perpage: Int

    """projects"""
    projects: [ObjectId!]

    """query"""
    query: String

    """repositories"""
    repositories: [ObjectId!]
  ): [Folder!]!
  hello: String!
  languages: [LanguageData!]!
  paymentMethod(
    """payment method id"""
    id: ObjectId!
  ): PaymentMethod!
  paymentMethods(
    """payment methods user"""
    user: ObjectId
  ): [PaymentMethod!]!
  product(
    """product name"""
    name: String
  ): Product!
  products(
    """product names"""
    names: [String!]
  ): [Product!]!
  project(
    """project id"""
    id: ObjectId

    """project name"""
    name: String
  ): Project!
  projectNameExists(
    """project name"""
    name: String!

    """repository owner"""
    owner: String
  ): Boolean!
  projects(
    """page number"""
    page: Int

    """number per page"""
    perpage: Int
  ): [Project!]!

  """public user data"""
  publicUser(
    """project id"""
    id: ObjectId

    """project name"""
    username: String
  ): PublicUser!
  repositories(
    """page number"""
    page: Int

    """number per page"""
    perpage: Int

    """project id"""
    projects: [ObjectId!]
  ): [Repository!]!
  repository(
    """repository id"""
    id: ObjectId

    """repository name"""
    name: String

    """repository owner"""
    owner: String
  ): Repository!
  repositoryNameExists(
    """repository name"""
    name: String!

    """repository owner"""
    owner: String
  ): Boolean!
  search(
    """only get base file data"""
    baseFileOnly: Boolean = true

    """branches"""
    branches: [String!]

    """file id"""
    file: ObjectId

    """programming languages"""
    languages: [Language!]

    """end line"""
    maxResultsPerFile: Int

    """file name"""
    name: String

    """only user files"""
    onlyUser: Boolean

    """page number"""
    page: Int

    """file path"""
    path: String

    """number per page"""
    perpage: Int

    """projects"""
    projects: [ObjectId!]

    """query"""
    query: String

    """repositories"""
    repositories: [ObjectId!]
  ): [FileResult!]!
  supportedExtensions: [String!]!
  token(
    """token id"""
    id: ObjectId!

    """token key"""
    key: String!

    """the token"""
    token: String!
  ): Token!
  tokens(
    """tokens user"""
    user: ObjectId
  ): [Token!]!

  """user data"""
  user: User!
}

"""repository"""
type Repository {
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """date created"""
  created: Float!

  """base folder containing files"""
  folder: ObjectId!

  """repository image"""
  image: String!

  """number of lines of code"""
  linesOfCode: Int!

  """name"""
  name: String!

  """number of files"""
  numberOfFiles: Int!

  """owner"""
  owner: ObjectId!

  """public access level"""
  public: AccessLevel!

  """date updated"""
  updated: Float!
}

"""repository db"""
type RepositoryDB {
  _id: ObjectId!

  """branches"""
  branches: [String!]!

  """date created"""
  created: Float!

  """base folder containing files"""
  folder: ObjectId!

  """repository image"""
  image: String!

  """number of lines of code"""
  linesOfCode: Int!

  """name"""
  name: String!

  """number of files"""
  numberOfFiles: Int!

  """owner"""
  owner: ObjectId!

  """public access level"""
  public: AccessLevel!

  """date updated"""
  updated: Float!
}

"""restrictions"""
type Restrictions {
  """number of private repositories allowed"""
  privateRepositories: Float!

  """number of public repositories allowed"""
  publicRepositories: Float!

  """storage restrictions"""
  storage: Float!
}

"""result type"""
enum ResultType {
  class
  comment
  function
  import
  importPath
  name
  path
  variable
}

"""return object for graphql mutations"""
type ReturnObj {
  """object id"""
  _id: ObjectId

  """other data"""
  data: String

  """message"""
  message: String!
}

"""given scope"""
type Scope {
  """category"""
  category: ScopeCategory!

  """how long the token is valid for (in seconds)"""
  level: ScopeLevel!
}

"""scope category"""
enum ScopeCategory {
  all
}

"""scope for token"""
input ScopeInput {
  """category"""
  category: ScopeCategory!

  """how long the token is valid for (in seconds)"""
  level: ScopeLevel!
}

"""scope level"""
enum ScopeLevel {
  read
  write
}

"""search result"""
type SearchResult {
  """item name"""
  name: String!

  """parents to current result"""
  parents: [ParentElement!]!

  """result preview"""
  preview: Preview

  """result score"""
  score: Float

  """item type"""
  type: ResultType!
}

type Subscription {
  authNotifications: AuthNotification!
}

"""access token for granting authorization for a given user"""
type Token {
  _id: ObjectId!

  """date created"""
  created: Float!

  """expiration date"""
  expires: Int!

  """hashed token"""
  hashedToken: String!

  """unique token key"""
  key: String!

  """token notes"""
  notes: String!

  """scopes of access for given token"""
  scopes: [Scope!]!

  """date updated"""
  updated: Float!

  """user id for token"""
  user: ObjectId!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""user account"""
type User {
  _id: ObjectId!

  """default address"""
  defaultAddress: ObjectId

  """default payment method"""
  defaultPaymentMethod: ObjectId

  """email"""
  email: String!

  """email verified"""
  emailVerified: Boolean!

  """github installation id"""
  githubInstallationID: Float!

  """github username"""
  githubUsername: String!

  """name"""
  name: String!

  """user plan name"""
  plan: String!

  """project access"""
  projects: [Access!]!

  """repository access"""
  repositories: [Access!]!

  """current token version"""
  tokenVersion: Float!

  """user type"""
  type: String!

  """username"""
  username: String!
}

"""user currency object"""
type UserCurrency {
  _id: ObjectId!

  """currency"""
  currency: String!

  """stripe customer id"""
  customer: String!

  """user"""
  user: ObjectId!
}

"""variable"""
type Variable {
  _id: ObjectId!

  """is function argument"""
  isArgument: Boolean!

  """location"""
  location: Location!

  """name"""
  name: String!

  """parent"""
  parent: Parent!

  """type"""
  type: String!
}
