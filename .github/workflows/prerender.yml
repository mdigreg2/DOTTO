name: Upload Prerender
on:
  push:
    branches:
      - master
    paths:
      - "prerender/**"
      - ".github/workflows/prerender.yml"
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # checks out a copy of the repo
      - uses: actions/checkout@master
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # node yarn - cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build prerender
        id: build-prerender
        run: |
          cd prerender
          yarn install
          yarn run predeploy
          cd -
      - name: Docker cache
        id: docker-cache
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          registry: ${{ steps.login-ecr.outputs.registry }}
          image_name: rescribe-prerender
          # change image tag to ${{ github.sha }} if you want
          image_tag: latest
          context: prerender
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/ecs-fargate/api-task.json
          container-name: prerender
          image: ${{ steps.build-image.outputs.FULL_IMAGE_NAME }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: rescribe-api
          cluster: fargate
          # wait until service is stable
          wait-for-service-stability: false
