name: Run NLP Training
on:
  repository_dispatch:
    types:
      - 'train-nlp'
  push:
    branches:
      - master
    paths:
      - "nlp/training/**"
      - ".github/workflows/nlp.yml"
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # checks out a copy of the repo
      - uses: actions/checkout@master
      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: 3.8
      # python pip - cache
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: install dependencies
        run: |
          cd nlp/deployment
          conda env create --file ./environment.yml
          cd -
      - name: Run precommit
        id: precommit
        run: |
          cd nlp
          ./precommit.sh
          cd -
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rescribe-nlp-training
          # change image tag to ${{ github.sha }} if you want
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd nlp/training
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          cd -
      - name: Run training job
        id: run-job
        env:
          ROLE: ${{ secrets.AWS_SAGEMAKER_ROLE }}
          IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        run: |
          cd nlp/sagemaker
          source $(conda info --base)/etc/profile.d/conda.sh
          conda activate rescribe-nlp-sagemaker
          python3 src/main.py
          conda deactivate
          cd -
      - name: finish
        run: echo "finished!"
